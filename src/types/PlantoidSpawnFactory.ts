/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { PlantoidSpawn } from "./PlantoidSpawn";

export class PlantoidSpawnFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(_template: string, overrides?: Overrides): Promise<PlantoidSpawn> {
    return super.deploy(_template, overrides || {}) as Promise<PlantoidSpawn>;
  }
  getDeployTransaction(
    _template: string,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(_template, overrides || {});
  }
  attach(address: string): PlantoidSpawn {
    return super.attach(address) as PlantoidSpawn;
  }
  connect(signer: Signer): PlantoidSpawnFactory {
    return super.connect(signer) as PlantoidSpawnFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PlantoidSpawn {
    return new Contract(address, _abi, signerOrProvider) as PlantoidSpawn;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_template",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "plantoid",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "artist",
        type: "address",
      },
    ],
    name: "PlantoidSpawned",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_plantoidAddr",
        type: "address",
      },
      {
        internalType: "address",
        name: "_artist",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_threshold",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
    ],
    name: "spawnPlantoid",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "template",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161048638038061048683398101604081905261002f91610044565b60601b6001600160601b031916608052610074565b60006020828403121561005657600080fd5b81516001600160a01b038116811461006d57600080fd5b9392505050565b60805160601c6103ef610097600039600081816068015260aa01526103ef6000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806350417bcc1461003b5780636f2ddd9314610063575b600080fd5b61004e610049366004610277565b6100a2565b60405190151581526020015b60405180910390f35b61008a7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161005a565b6000806100ce7f000000000000000000000000000000000000000000000000000000000000000061017c565b60405163689ccd8d60e11b81529091506001600160a01b0382169063d1399b1a90610105908a908a908a908a908a90600401610353565b600060405180830381600087803b15801561011f57600080fd5b505af1158015610133573d6000803e3d6000fd5b50506040516001600160a01b03808a169350841691507f41f5c5522291ed9f943111efe0472cc0f845f20f6da0cf908cbd122f750e7a5490600090a35060019695505050505050565b6000808260601b9050604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528160148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f0949350505050565b80356001600160a01b03811681146101e557600080fd5b919050565b600082601f8301126101fb57600080fd5b813567ffffffffffffffff80821115610216576102166103a3565b604051601f8301601f19908116603f0116810190828211818310171561023e5761023e6103a3565b8160405283815286602085880101111561025757600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600060a0868803121561028f57600080fd5b610298866101ce565b94506102a6602087016101ce565b935060408601359250606086013567ffffffffffffffff808211156102ca57600080fd5b6102d689838a016101ea565b935060808801359150808211156102ec57600080fd5b506102f9888289016101ea565b9150509295509295909350565b6000815180845260005b8181101561032c57602081850181015186830182015201610310565b8181111561033e576000602083870101525b50601f01601f19169290920160200192915050565b60006001600160a01b03808816835280871660208401525084604083015260a0606083015261038560a0830185610306565b82810360808401526103978185610306565b98975050505050505050565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220f4b37755475a0daadbc55e5b2329995e55aece57b5922e9fe1bfb0e1bee6054964736f6c63430008070033";
