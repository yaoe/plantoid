/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface PlantoidSpawnInterface extends ethers.utils.Interface {
  functions: {
    "spawnPlantoid(address,address,uint256,string,string)": FunctionFragment;
    "template()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "spawnPlantoid",
    values: [string, string, BigNumberish, string, string]
  ): string;
  encodeFunctionData(functionFragment: "template", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "spawnPlantoid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "template", data: BytesLike): Result;

  events: {
    "PlantoidSpawned(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PlantoidSpawned"): EventFragment;
}

export class PlantoidSpawn extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: PlantoidSpawnInterface;

  functions: {
    spawnPlantoid(
      _plantoidAddr: string,
      _artist: string,
      _threshold: BigNumberish,
      _name: string,
      _symbol: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "spawnPlantoid(address,address,uint256,string,string)"(
      _plantoidAddr: string,
      _artist: string,
      _threshold: BigNumberish,
      _name: string,
      _symbol: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    template(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "template()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;
  };

  spawnPlantoid(
    _plantoidAddr: string,
    _artist: string,
    _threshold: BigNumberish,
    _name: string,
    _symbol: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "spawnPlantoid(address,address,uint256,string,string)"(
    _plantoidAddr: string,
    _artist: string,
    _threshold: BigNumberish,
    _name: string,
    _symbol: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  template(overrides?: CallOverrides): Promise<string>;

  "template()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    spawnPlantoid(
      _plantoidAddr: string,
      _artist: string,
      _threshold: BigNumberish,
      _name: string,
      _symbol: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "spawnPlantoid(address,address,uint256,string,string)"(
      _plantoidAddr: string,
      _artist: string,
      _threshold: BigNumberish,
      _name: string,
      _symbol: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    template(overrides?: CallOverrides): Promise<string>;

    "template()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    PlantoidSpawned(
      plantoid: string | null,
      artist: string | null
    ): EventFilter;
  };

  estimateGas: {
    spawnPlantoid(
      _plantoidAddr: string,
      _artist: string,
      _threshold: BigNumberish,
      _name: string,
      _symbol: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "spawnPlantoid(address,address,uint256,string,string)"(
      _plantoidAddr: string,
      _artist: string,
      _threshold: BigNumberish,
      _name: string,
      _symbol: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    template(overrides?: CallOverrides): Promise<BigNumber>;

    "template()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    spawnPlantoid(
      _plantoidAddr: string,
      _artist: string,
      _threshold: BigNumberish,
      _name: string,
      _symbol: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "spawnPlantoid(address,address,uint256,string,string)"(
      _plantoidAddr: string,
      _artist: string,
      _threshold: BigNumberish,
      _name: string,
      _symbol: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    template(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "template()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
