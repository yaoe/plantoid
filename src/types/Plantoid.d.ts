/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface PlantoidInterface extends ethers.utils.Interface {
  functions: {
    "acceptWinner(uint256,uint256)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "artist()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "contractURI()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "init(address,address,uint256,string,string)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "mintSeed(uint256,address,string,bytes)": FunctionFragment;
    "name()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "plantoidAddress()": FunctionFragment;
    "proposalCounter(uint256)": FunctionFragment;
    "proposals(uint256,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "signatureUsed(bytes32)": FunctionFragment;
    "spawn(address,uint256,string,string)": FunctionFragment;
    "spawnCount()": FunctionFragment;
    "spawnCustom(address,address,uint256,string,string)": FunctionFragment;
    "submitProposal(uint256,string)": FunctionFragment;
    "submitVote(uint256,uint256,uint256[])": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "voted(uint256,uint256)": FunctionFragment;
    "votes(uint256,uint256)": FunctionFragment;
    "winningProposal(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptWinner",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "artist", values?: undefined): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "contractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [string, string, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mintSeed",
    values: [BigNumberish, string, string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "plantoidAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalCounter",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "signatureUsed",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "spawn",
    values: [string, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "spawnCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "spawnCustom",
    values: [string, string, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "submitProposal",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "submitVote",
    values: [BigNumberish, BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "voted",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "votes",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "winningProposal",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptWinner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "artist", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintSeed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "plantoidAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signatureUsed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "spawn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "spawnCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "spawnCustom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "submitVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "votes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "winningProposal",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "Deposit(uint256,address)": EventFragment;
    "ProposalSubmitted(address,string)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalSubmitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class Plantoid extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: PlantoidInterface;

  functions: {
    acceptWinner(
      _round: BigNumberish,
      _winningProposal: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "acceptWinner(uint256,uint256)"(
      _round: BigNumberish,
      _winningProposal: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    artist(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "artist()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    contractURI(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "contractURI()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    init(
      _plantoid: string,
      _artist: string,
      _threshold: BigNumberish,
      name_: string,
      symbol_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "init(address,address,uint256,string,string)"(
      _plantoid: string,
      _artist: string,
      _threshold: BigNumberish,
      name_: string,
      symbol_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    mintSeed(
      _nonce: BigNumberish,
      _recipient: string,
      _tokenUri: string,
      _signature: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mintSeed(uint256,address,string,bytes)"(
      _nonce: BigNumberish,
      _recipient: string,
      _tokenUri: string,
      _signature: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "name()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    plantoidAddress(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "plantoidAddress()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    proposalCounter(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "proposalCounter(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    proposals(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      proposer: string;
      proposalUri: string;
      0: string;
      1: string;
    }>;

    "proposals(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      proposer: string;
      proposalUri: string;
      0: string;
      1: string;
    }>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    signatureUsed(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "signatureUsed(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    spawn(
      _newPlantoid: string,
      _plantoidThreshold: BigNumberish,
      _plantoidName: string,
      _plantoidSymbol: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "spawn(address,uint256,string,string)"(
      _newPlantoid: string,
      _plantoidThreshold: BigNumberish,
      _plantoidName: string,
      _plantoidSymbol: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    spawnCount(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "spawnCount()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    spawnCustom(
      _newPlantoidSpawner: string,
      _newPlantoid: string,
      _plantoidThreshold: BigNumberish,
      _plantoidName: string,
      _plantoidSymbol: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "spawnCustom(address,address,uint256,string,string)"(
      _newPlantoidSpawner: string,
      _newPlantoid: string,
      _plantoidThreshold: BigNumberish,
      _plantoidName: string,
      _plantoidSymbol: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    submitProposal(
      _round: BigNumberish,
      _proposalUri: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "submitProposal(uint256,string)"(
      _round: BigNumberish,
      _proposalUri: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    submitVote(
      _round: BigNumberish,
      _proposal: BigNumberish,
      _votingTokenIds: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "submitVote(uint256,uint256,uint256[])"(
      _round: BigNumberish,
      _proposal: BigNumberish,
      _votingTokenIds: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    symbol(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "symbol()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "tokenByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "tokenOfOwnerByIndex(address,uint256)"(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "tokenURI(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    totalSupply(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalSupply()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    voted(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "voted(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    votes(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "votes(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    winningProposal(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "winningProposal(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;
  };

  acceptWinner(
    _round: BigNumberish,
    _winningProposal: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "acceptWinner(uint256,uint256)"(
    _round: BigNumberish,
    _winningProposal: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  artist(overrides?: CallOverrides): Promise<string>;

  "artist()"(overrides?: CallOverrides): Promise<string>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  contractURI(overrides?: CallOverrides): Promise<string>;

  "contractURI()"(overrides?: CallOverrides): Promise<string>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getApproved(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  init(
    _plantoid: string,
    _artist: string,
    _threshold: BigNumberish,
    name_: string,
    symbol_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "init(address,address,uint256,string,string)"(
    _plantoid: string,
    _artist: string,
    _threshold: BigNumberish,
    name_: string,
    symbol_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isApprovedForAll(address,address)"(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mintSeed(
    _nonce: BigNumberish,
    _recipient: string,
    _tokenUri: string,
    _signature: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mintSeed(uint256,address,string,bytes)"(
    _nonce: BigNumberish,
    _recipient: string,
    _tokenUri: string,
    _signature: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "ownerOf(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  plantoidAddress(overrides?: CallOverrides): Promise<string>;

  "plantoidAddress()"(overrides?: CallOverrides): Promise<string>;

  proposalCounter(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "proposalCounter(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  proposals(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    proposer: string;
    proposalUri: string;
    0: string;
    1: string;
  }>;

  "proposals(uint256,uint256)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    proposer: string;
    proposalUri: string;
    0: string;
    1: string;
  }>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setApprovalForAll(address,bool)"(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  signatureUsed(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  "signatureUsed(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  spawn(
    _newPlantoid: string,
    _plantoidThreshold: BigNumberish,
    _plantoidName: string,
    _plantoidSymbol: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "spawn(address,uint256,string,string)"(
    _newPlantoid: string,
    _plantoidThreshold: BigNumberish,
    _plantoidName: string,
    _plantoidSymbol: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  spawnCount(overrides?: CallOverrides): Promise<BigNumber>;

  "spawnCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  spawnCustom(
    _newPlantoidSpawner: string,
    _newPlantoid: string,
    _plantoidThreshold: BigNumberish,
    _plantoidName: string,
    _plantoidSymbol: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "spawnCustom(address,address,uint256,string,string)"(
    _newPlantoidSpawner: string,
    _newPlantoid: string,
    _plantoidThreshold: BigNumberish,
    _plantoidName: string,
    _plantoidSymbol: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  submitProposal(
    _round: BigNumberish,
    _proposalUri: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "submitProposal(uint256,string)"(
    _round: BigNumberish,
    _proposalUri: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  submitVote(
    _round: BigNumberish,
    _proposal: BigNumberish,
    _votingTokenIds: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "submitVote(uint256,uint256,uint256[])"(
    _round: BigNumberish,
    _proposal: BigNumberish,
    _votingTokenIds: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  tokenByIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "tokenByIndex(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "tokenOfOwnerByIndex(address,uint256)"(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenURI(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "tokenURI(uint256)"(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  voted(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "voted(uint256,uint256)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  votes(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "votes(uint256,uint256)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  winningProposal(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "winningProposal(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    acceptWinner(
      _round: BigNumberish,
      _winningProposal: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "acceptWinner(uint256,uint256)"(
      _round: BigNumberish,
      _winningProposal: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    artist(overrides?: CallOverrides): Promise<string>;

    "artist()"(overrides?: CallOverrides): Promise<string>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contractURI(overrides?: CallOverrides): Promise<string>;

    "contractURI()"(overrides?: CallOverrides): Promise<string>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    init(
      _plantoid: string,
      _artist: string,
      _threshold: BigNumberish,
      name_: string,
      symbol_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "init(address,address,uint256,string,string)"(
      _plantoid: string,
      _artist: string,
      _threshold: BigNumberish,
      name_: string,
      symbol_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mintSeed(
      _nonce: BigNumberish,
      _recipient: string,
      _tokenUri: string,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "mintSeed(uint256,address,string,bytes)"(
      _nonce: BigNumberish,
      _recipient: string,
      _tokenUri: string,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    plantoidAddress(overrides?: CallOverrides): Promise<string>;

    "plantoidAddress()"(overrides?: CallOverrides): Promise<string>;

    proposalCounter(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "proposalCounter(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      proposer: string;
      proposalUri: string;
      0: string;
      1: string;
    }>;

    "proposals(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      proposer: string;
      proposalUri: string;
      0: string;
      1: string;
    }>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    signatureUsed(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    "signatureUsed(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    spawn(
      _newPlantoid: string,
      _plantoidThreshold: BigNumberish,
      _plantoidName: string,
      _plantoidSymbol: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "spawn(address,uint256,string,string)"(
      _newPlantoid: string,
      _plantoidThreshold: BigNumberish,
      _plantoidName: string,
      _plantoidSymbol: string,
      overrides?: CallOverrides
    ): Promise<void>;

    spawnCount(overrides?: CallOverrides): Promise<BigNumber>;

    "spawnCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    spawnCustom(
      _newPlantoidSpawner: string,
      _newPlantoid: string,
      _plantoidThreshold: BigNumberish,
      _plantoidName: string,
      _plantoidSymbol: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "spawnCustom(address,address,uint256,string,string)"(
      _newPlantoidSpawner: string,
      _newPlantoid: string,
      _plantoidThreshold: BigNumberish,
      _plantoidName: string,
      _plantoidSymbol: string,
      overrides?: CallOverrides
    ): Promise<void>;

    submitProposal(
      _round: BigNumberish,
      _proposalUri: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "submitProposal(uint256,string)"(
      _round: BigNumberish,
      _proposalUri: string,
      overrides?: CallOverrides
    ): Promise<void>;

    submitVote(
      _round: BigNumberish,
      _proposal: BigNumberish,
      _votingTokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "submitVote(uint256,uint256,uint256[])"(
      _round: BigNumberish,
      _proposal: BigNumberish,
      _votingTokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenOfOwnerByIndex(address,uint256)"(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "tokenURI(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    voted(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "voted(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    votes(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "votes(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    winningProposal(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "winningProposal(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    Approval(
      owner: string | null,
      approved: string | null,
      tokenId: BigNumberish | null
    ): EventFilter;

    ApprovalForAll(
      owner: string | null,
      operator: string | null,
      approved: null
    ): EventFilter;

    Deposit(amount: null, sender: null): EventFilter;

    ProposalSubmitted(proposer: null, proposalUri: null): EventFilter;

    Transfer(
      from: string | null,
      to: string | null,
      tokenId: BigNumberish | null
    ): EventFilter;
  };

  estimateGas: {
    acceptWinner(
      _round: BigNumberish,
      _winningProposal: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "acceptWinner(uint256,uint256)"(
      _round: BigNumberish,
      _winningProposal: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    artist(overrides?: CallOverrides): Promise<BigNumber>;

    "artist()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contractURI(overrides?: CallOverrides): Promise<BigNumber>;

    "contractURI()"(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(
      _plantoid: string,
      _artist: string,
      _threshold: BigNumberish,
      name_: string,
      symbol_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "init(address,address,uint256,string,string)"(
      _plantoid: string,
      _artist: string,
      _threshold: BigNumberish,
      name_: string,
      symbol_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintSeed(
      _nonce: BigNumberish,
      _recipient: string,
      _tokenUri: string,
      _signature: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mintSeed(uint256,address,string,bytes)"(
      _nonce: BigNumberish,
      _recipient: string,
      _tokenUri: string,
      _signature: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    plantoidAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "plantoidAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposalCounter(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "proposalCounter(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "proposals(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    signatureUsed(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "signatureUsed(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    spawn(
      _newPlantoid: string,
      _plantoidThreshold: BigNumberish,
      _plantoidName: string,
      _plantoidSymbol: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "spawn(address,uint256,string,string)"(
      _newPlantoid: string,
      _plantoidThreshold: BigNumberish,
      _plantoidName: string,
      _plantoidSymbol: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    spawnCount(overrides?: CallOverrides): Promise<BigNumber>;

    "spawnCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    spawnCustom(
      _newPlantoidSpawner: string,
      _newPlantoid: string,
      _plantoidThreshold: BigNumberish,
      _plantoidName: string,
      _plantoidSymbol: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "spawnCustom(address,address,uint256,string,string)"(
      _newPlantoidSpawner: string,
      _newPlantoid: string,
      _plantoidThreshold: BigNumberish,
      _plantoidName: string,
      _plantoidSymbol: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    submitProposal(
      _round: BigNumberish,
      _proposalUri: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "submitProposal(uint256,string)"(
      _round: BigNumberish,
      _proposalUri: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    submitVote(
      _round: BigNumberish,
      _proposal: BigNumberish,
      _votingTokenIds: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "submitVote(uint256,uint256,uint256[])"(
      _round: BigNumberish,
      _proposal: BigNumberish,
      _votingTokenIds: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenOfOwnerByIndex(address,uint256)"(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenURI(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    voted(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "voted(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votes(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "votes(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    winningProposal(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "winningProposal(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptWinner(
      _round: BigNumberish,
      _winningProposal: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "acceptWinner(uint256,uint256)"(
      _round: BigNumberish,
      _winningProposal: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    artist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "artist()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "contractURI()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    init(
      _plantoid: string,
      _artist: string,
      _threshold: BigNumberish,
      name_: string,
      symbol_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "init(address,address,uint256,string,string)"(
      _plantoid: string,
      _artist: string,
      _threshold: BigNumberish,
      name_: string,
      symbol_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintSeed(
      _nonce: BigNumberish,
      _recipient: string,
      _tokenUri: string,
      _signature: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mintSeed(uint256,address,string,bytes)"(
      _nonce: BigNumberish,
      _recipient: string,
      _tokenUri: string,
      _signature: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    plantoidAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "plantoidAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposalCounter(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proposalCounter(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposals(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proposals(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    signatureUsed(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "signatureUsed(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    spawn(
      _newPlantoid: string,
      _plantoidThreshold: BigNumberish,
      _plantoidName: string,
      _plantoidSymbol: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "spawn(address,uint256,string,string)"(
      _newPlantoid: string,
      _plantoidThreshold: BigNumberish,
      _plantoidName: string,
      _plantoidSymbol: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    spawnCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "spawnCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    spawnCustom(
      _newPlantoidSpawner: string,
      _newPlantoid: string,
      _plantoidThreshold: BigNumberish,
      _plantoidName: string,
      _plantoidSymbol: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "spawnCustom(address,address,uint256,string,string)"(
      _newPlantoidSpawner: string,
      _newPlantoid: string,
      _plantoidThreshold: BigNumberish,
      _plantoidName: string,
      _plantoidSymbol: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    submitProposal(
      _round: BigNumberish,
      _proposalUri: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "submitProposal(uint256,string)"(
      _round: BigNumberish,
      _proposalUri: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    submitVote(
      _round: BigNumberish,
      _proposal: BigNumberish,
      _votingTokenIds: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "submitVote(uint256,uint256,uint256[])"(
      _round: BigNumberish,
      _proposal: BigNumberish,
      _votingTokenIds: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenOfOwnerByIndex(address,uint256)"(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenURI(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    voted(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "voted(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votes(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "votes(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    winningProposal(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "winningProposal(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
